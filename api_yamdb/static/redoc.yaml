openapi: 3.0.2
info:
  title: 'YaMDb API'
  version: ''
  description: |
    queries to API start with `/api/v1/`

    # Description
    Web API service YaMDb collects scores and reviews on different works of art (titles) in different categories (e.g. films, music, books) and genres (e.g. drama, comedy, ballad)

    # How to Register
    1. Make POST-query to add new user with `email` and `username` to endpoint `/api/v1/auth/signup/`
    2. **YaMDB** sends email with confirmation code (`confirmation_code`) to address `email`
    3. Make POST-query with `username` and `confirmation_code` to endpoint `/api/v1/auth/token/` and receive JWT-token `token`
    4. With PATCH-query to endpoint `/api/v1/users/me/` you can can fill your profile (detailed list of filds can be seen below)

    # User Roles
    - **Anonymous** — can read (GET) descriptions of titles, reviews and comments
    - **Authenticated user** (`user`) — has same GET permissions as **Anonymous** and can publish (POST) own reviews, give a scores to titles and comment reviews of other users. Authenticated user can edit (PATCH) and delete (DEL) **own** reviews and comments. This is a default role for every new user
    - **Moderator** (`moderator`) — same permissions as **Authenticated user** and permission to delete **all** reviews and comments
    - **Administrator** (`admin`) — full permission to manage all contents of the project. Can create and delete titles, categories and genres. Can assign users roles 
    - **Superuser Django** — has all rights of Administrator (`admin`)


servers:
  - url: /api/v1/

tags:
  - name: AUTH
    description: Users register and token generation
  - name: CATEGORIES
    description: Categories (types) of works
  - name: GENRES
    description: Genres of works
  - name: TITLES
    description: Titles (e.g. films, music, books) for review
  - name: REVIEWS
    description: Reviews to titles
  - name: COMMENTS
    description: Comments to reviews
  - name: USERS
    description: Users

paths:
  /auth/signup/:
    post:
      tags:
        - AUTH
      operationId: User registration
      description: |
        Receive confirmation code to passed `email`.

        Access rights: **Accessible without token**

        'me' can't be used as `username`

        Fields `email` and `username` must be unique
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              required:
                - email
                - username
              properties:
                email:
                  type: string
                username:
                  type: string
      responses:
        200:
          content:
            application/json:
              schema:
                properties:
                  email:
                    type: string
                  username:
                    type: string
                required:
                - email
                - username
          description: Request succeeded
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: Required field missing or invalid data passed
  /auth/token/:
    post:
      tags:
        - AUTH
      operationId: Receive JWT-token
      description: |
        Receive JWT-token after passing username and confirmation code

        Access rights: **Accessible without token**
      requestBody:
        content:
          application/json:
            schema:
              required:
                - username
                - confirmation_code
              properties:
                username:
                  type: string
                confirmation_code:
                  type: string
                  writeOnly: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          description: Request succeeded
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: Required field missing or invalid data passed
        404:
          description: User is not found

  /categories/:
    get:
      tags:
        - CATEGORIES
      operationId: Get categories list
      description: |
        Get categories list

        Access rights: **Accessible without token**
      parameters:
      - name: search
        in: query
        description: Search by category name
        schema:
          type: string
      responses:
        200:
          description: Request succeeded
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    count:
                      type: integer
                    next:
                      type: string
                    previous:
                      type: string
                    results:
                      type: array
                      items:
                        $ref: '#/components/schemas/Category'
    post:
      tags:
        - CATEGORIES
      operationId: Add new category
      description: |
        Create category

        Access rights: **Administrator**

        Field `slug` must be unique for every category
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        201:
          description: Request succeeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        400:
          description: Required field missing or invalid data passed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          description: JWT-token required
        403:
          description: No access rights
      security:
      - jwt-token:
        - write:admin
  /categories/{slug}/:
    delete:
      tags:
        - CATEGORIES
      operationId: Delete category
      description: |
        Delete category

        Access rights: **Administrator**
      parameters:
      - name: slug
        in: path
        required: true
        description: Category Slug
        schema:
          type: string
      responses:
        204:
          description: Request succeeded
        401:
          description: JWT-token required
        403:
          description: No access rights
        404:
          description: Category not foubnd
      security:
      - jwt-token:
        - write:admin

  /genres/:
    get:
      tags:
        - GENRES
      operationId: Get genres list
      description: |
        Get genres list

        Access rights: **Accessible without token**
      parameters:
      - name: search
        in: query
        description: Search by genre name
        schema:
          type: string
      responses:
        200:
          description: Request succeeded
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    count:
                      type: integer
                    next:
                      type: string
                    previous:
                      type: string
                    results:
                      type: array
                      items:
                        $ref: '#/components/schemas/Genre'
    post:
      tags:
        - GENRES
      operationId: Add genre
      description: |
        Add genre

        Access rights: **Administrator**

        Field `slug` must be unique for every genre
      responses:
        201:
          description: Request succeeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Genre'
        400:
          description: Required field missing or invalid data passed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          description: JWT-token required
        403:
          description: No access rights
      security:
      - jwt-token:
        - write:admin

  /genres/{slug}/:
    delete:
      tags:
        - GENRES
      operationId: Delete genre
      description: |
        Delete genre

        Access rights: **Administrator**
      parameters:
      - name: slug
        in: path
        required: true
        description: Genre slug
        schema:
          type: string
      responses:
        204:
          description: Request succeeded
        401:
          description: JWT-token required
        403:
          description: No access rights
        404:
          description: Genre not found
      security:
      - jwt-token:
        - write:admin

  /titles/:
    get:
      tags:
        - TITLES
      operationId: Get titles list
      description: |
        Get titles list

        Access rights: **Accessible without token**
      parameters:
        - name: category
          in: query
          description: Filter by slug field of category
          schema:
            type: string
        - name: genre
          in: query
          description: Filter by slug field of genre
          schema:
            type: string
        - name: name
          in: query
          description: Filter by name of title
          schema:
            type: string
        - name: year
          in: query
          description: Filter by year
          schema:
            type: integer
      responses:
        200:
          description: Request succeeded
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    count:
                      type: integer
                    next:
                      type: string
                    previous:
                      type: string
                    results:
                      type: array
                      items:
                        $ref: '#/components/schemas/Title'
    post:
      tags:
        - TITLES
      operationId: Add title
      description: |
        Add title

        Access rights: **Administrator**

        Can't add titles that are not out yet (publication year can't be greater than the current)

        To add new title object `category` and `genre` fields must be chosen from existing data in database
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TitleCreate'
      responses:
        201:
          description: Request succeeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Title'
        400:
          description: Required field missing or invalid data passed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          description: JWT-token required
        403:
          description: No access rights
      security:
      - jwt-token:
        - write:admin
  /titles/{titles_id}/:
    parameters:
      - name: titles_id
        in: path
        required: true
        description: ID объекта
        schema:
          type: integer
    get:
      tags:
        - TITLES
      operationId: Retrieve title
      description: |
        Retrieve title

        Access rights: **Accessible without token**
      responses:
        200:
          description: Request succeeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Title'
        404:
          description: Title not found
    patch:
      tags:
        - TITLES
      operationId: Update title
      description: |
        Update title

        Access rights: **Administrator**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TitleCreate'
      responses:
        200:
          description: Request succeeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Title'
        401:
          description: JWT-token required
        403:
          description: No access rights
        404:
          description: Title not found
      security:
      - jwt-token:
        - write:admin
    delete:
      tags:
        - TITLES
      operationId: Delete title
      description: |
        Delete title

        Access rights: **Administrator**
      responses:
        204:
          description: Request succeeded
        401:
          description: JWT-token required
        403:
          description: No access rights
        404:
          description: Title not found
      security:
      - jwt-token:
        - write:admin

  /titles/{title_id}/reviews/:
    parameters:
      - name: title_id
        in: path
        required: true
        description: Title ID
        schema:
          type: integer
    get:
      tags:
        - REVIEWS
      operationId: Get reviews list
      description: |
        Get reviews list

        Access rights: **Accessible without token**
      responses:
        200:
          description: Request succeeded
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    count:
                      type: integer
                    next:
                      type: string
                    previous:
                      type: string
                    results:
                      type: array
                      items:
                        $ref: '#/components/schemas/Review'
        404:
          description: Title not found
    post:
      tags:
        - REVIEWS
      operationId: Add review
      description: |
        Add review 
        
        User can add only one review

        Access rights: **Authenticated users**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
      responses:
        201:
          description: Request succeeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        400:
          description: Required field missing or invalid data passed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          description: JWT-token required
        404:
          description: Title not found
      security:
      - jwt-token:
        - write:user,moderator,admin
  /titles/{title_id}/reviews/{review_id}/:
    parameters:
      - name: title_id
        in: path
        required: true
        description: Title ID
        schema:
          type: integer
      - name: review_id
        in: path
        required: true
        description: Review ID
        schema:
          type: integer
    get:
      tags:
        - REVIEWS
      operationId: Get reviews by title id
      description: |
        Get reviews by title id

        Access rights: **Accessible without token**
      responses:
        200:
          description: Request succeeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        404:
          description: Title or review not found
    patch:
      tags:
        - REVIEWS
      operationId: Patch review by id
      description: |
        Patch review by id

        Access rights: **Review author, moderator or administrator**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
      responses:
        200:
          description: Request succeeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        400:
          description: Required field missing or invalid data passed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          description: JWT-token required
        403:
          description: No access rights
        404:
          description: Title not found
      security:
      - jwt-token:
        - write:user,moderator,admin
    delete:
      tags:
        - REVIEWS
      operationId: Удаление отзыва по id
      description: |
        Удалить отзыв по id

        Access rights: **Review author, moderator or administrator**
      responses:
        204:
          description: Request succeeded
        401:
          description: JWT-token required
        403:
          description: No access rights
        404:
          description: Title or review not found
      security:
      - jwt-token:
        - write:user,moderator,admin

  /titles/{title_id}/reviews/{review_id}/comments/:
    parameters:
      - name: title_id
        in: path
        required: true
        description: Title ID
        schema:
          type: integer
      - name: review_id
        in: path
        required: true
        description: Review ID
        schema:
          type: integer
    get:
      tags:
        - COMMENTS
      operationId: Get all commets to review by id
      description: |
        Get all commets to review by id

        Access rights: **Accessible without token**
      responses:
        200:
          description: Request succeeded
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    count:
                      type: integer
                    next:
                      type: string
                    previous:
                      type: string
                    results:
                      type: array
                      items:
                        $ref: '#/components/schemas/Comment'
        404:
          description: Title or review not found
    post:
      tags:
        - COMMENTS
      operationId: Add commentary to review
      description: |
        Add commentary to review

        Access rights: **Authenticated users**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: Request succeeded
        400:
          description: Required field missing or invalid data passed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          description: JWT-token required
        404:
          description: Title or review not found
      security:
      - jwt-token:
        - write:user,moderator,admin

  /titles/{title_id}/reviews/{review_id}/comments/{comment_id}/:
    parameters:
      - name: title_id
        in: path
        required: true
        description: Title ID
        schema:
          type: integer
      - name: review_id
        in: path
        required: true
        description: Review ID
        schema:
          type: integer
      - name: comment_id
        in: path
        required: true
        description: Commentary ID
        schema:
          type: integer
    get:
      tags:
        - COMMENTS
      operationId: Get commentary to review by id
      description: |
        Get commentary to review by id

        Access rights: **Accessible without token**
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: Request succeeded
        404:
          description: Title, review or commentary not found
    patch:
      tags:
        - COMMENTS
      operationId: Update commentary to review by id
      description: |
        Update commentary to review by id

        Access rights: **Commentary author, moderator or administrator**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: Request succeeded
        400:
          description: Required field missing or invalid data passed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          description: JWT-token required
        403:
          description: No access rights
        404:
          description: Title, review or commentary not found
      security:
      - jwt-token:
        - write:user,moderator,admin
    delete:
      tags:
        - COMMENTS
      operationId: Delete commentary by id
      description: |
        Delete commentary by id

        Access rights: **Commentary author, moderator or administrator**
      responses:
        204:
          description: Request succeeded
        401:
          description: JWT-token required
        403:
          description: No access rights
        404:
          description: Title, review or commentary not found
      security:
      - jwt-token:
        - write:user,moderator,admin

  /users/:
    get:
      tags:
        - USERS
      operationId: Get users list
      description: |
        Get users list

        Access rights: **Administrator**
      parameters:
      - name: search
        in: query
        description: Search by username
        schema:
          type: string
      responses:
        200:
          description: Request succeeded
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    count:
                      type: integer
                    next:
                      type: string
                    previous:
                      type: string
                    results:
                      type: array
                      items:
                        $ref: '#/components/schemas/User'
        401:
          description: JWT-token required
      security:
      - jwt-token:
        - read:admin
    post:
      tags:
        - USERS
      operationId: Add user
      description: |
        Add user

        Access rights: **Administrator**

        `email` and `username` fields must be unique
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: Request succeeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Required field missing or invalid data passed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          description: JWT-token required
        403:
          description: No access rights
      security:
      - jwt-token:
        - write:admin
  /users/{username}/:
    parameters:
      - name: username
        in: path
        required: true
        description: User username
        schema:
          type: string
    get:
      tags:
        - USERS
      operationId: Get user by username
      description: |
        Get user by username

        Access rights: **Administrator**
      responses:
        200:
          description: Request succeeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: JWT-token required
        403:
          description: No access rights
        404:
          description: User not found
      security:
      - jwt-token:
        - read:admin
    patch:
      tags:
        - USERS
      operationId: Update user by username
      description: |
        Update user by username

        Access rights: **Administrator**

        `email` and `username` fields must be unique
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: Request succeeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Required field missing or invalid data passed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          description: JWT-token required
        403:
          description: No access rights
        404:
          description: User not found
      security:
      - jwt-token:
        - write:admin
    delete:
      tags:
        - USERS
      operationId: Delete user by username
      description: |
        Delete user by username

        Access rights: **Administrator**
      responses:
        204:
          description: Request succeeded
        401:
          description: JWT-token required
        403:
          description: No access rights
        404:
          description: User not found
      security:
      - jwt-token:
        - write:admin

  /users/me/:
    get:
      tags:
        - USERS
      operationId: Get self account details
      description: |
        Get self account details

        Access rights: **Authenticated user**
      responses:
        200:
          description: Request succeeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      security:
      - jwt-token:
        - read:admin,moderator,user
    patch:
      tags:
        - USERS
      operationId: Update self account details
      description: |
        Update self account details

        Access rights: **Authenticated user**

        `email` and `username` fields must be unique
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Me'
      responses:
        200:
          description: Request succeeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Required field missing or invalid data passed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
      security:
      - jwt-token:
        - write:admin,moderator,user

components:
  schemas:

    User:
      title: User
      type: object
      description: Detailed user data
      required:
          - username
          - email
      properties:
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+\z
          maxLength: 150
        email:
          type: string
          format: email
          maxLength: 254
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        bio:
          type: string
        role:
          type: string
          description: Administrator, moderaotr or user. By default `user`
          enum:
            - user
            - moderator
            - admin

    Title:
      title: Title
      type: object
      required:
        - name
      properties:
        id:
          type: integer
          title: Title ID
          readOnly: true
        name:
          type: string
          title: Name
        year:
          type: integer
          title: Publish year
        rating:
          type: integer
          readOnly: True
          title: Rating based on scores, if no scores — `None`
        description:
          type: string
          title: Description
        genre:
          type: array
          items:
            $ref: '#/components/schemas/Genre'
        category:
          $ref: '#/components/schemas/Category'

    TitleCreate:
      title: Title to write
      type: object
      required:
        - name
        - year
        - genre
        - category
      properties:
        name:
          type: string
          title: Name
        year:
          type: integer
          title: Publish year
        description:
          type: string
          title: Description
        genre:
          type: array
          items:
            type: string
            title: Genre slug
        category:
          type: string
          title: Category slug

    Genre:
      type: object
      properties:
        name:
          type: string
          maxLength: 256
        slug:
          type: string
          maxLength: 50
          pattern: ^[-a-zA-Z0-9_]+$
      required:
      - name
      - slug

    Review:
      title: Review
      type: object
      description: Detailed review data
      required:
          - text
          - score
      properties:
        id:
          type: integer
          title: Review ID
          readOnly: true
        text:
          type: string
          title: Review text
        author:
          type: string
          title: User username
          readOnly: true
        score:
          type: integer
          title: Score
          minimum: 1
          maximum: 10
        pub_date:
          type: string
          format: date-time
          title: Review publication date
          readOnly: true

    ValidationError:
      title: Validation error
      type: object
      properties:
        field_name:
          type: array
          items:
            type: string

    Token:
      title: Token
      type: object
      properties:
        token:
          type: string
          title: access token

    Comment:
      title: Commentary
      type: object
      description: Detailed commentary data
      required:
        - text
      properties:
        id:
          type: integer
          title: Commentary ID
          readOnly: true
        text:
          type: string
          title: Commentary text
        author:
          type: string
          title: Username of commentary author
          readOnly: true
        pub_date:
          type: string
          format: date-time
          title: Commentary publication date
          readOnly: true

    Me:
      type: object
      properties:
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+\z
          maxLength: 150
        role:
          enum:
          - admin
          - moderator
          - user
          type: string
          readOnly: true
        email:
          type: string
          format: email
          maxLength: 254
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        bio:
          type: string
      required:
      - username
      - email

    Category:
      type: object
      properties:
        name:
          type: string
          maxLength: 256
        slug:
          type: string
          maxLength: 50
          pattern: ^[-a-zA-Z0-9_]+$
      required:
      - name
      - slug

  securitySchemes:
    jwt-token:
      type: apiKey
      description: Authentication with JWT-tokens
      name: Bearer
      in: header
